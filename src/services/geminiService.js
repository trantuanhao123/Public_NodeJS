const axios = require("axios");
require("dotenv").config();
const Question = require("../models/question");
const JSON5 = require('json5');
const API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;
if (!API_KEY) {
  console.error("‚ùå L·ªñI: GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong .env");
  throw new Error("GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong .env");
}
const parseJsonResponse = (response) => {
  try {
    if (!response?.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
      throw new Error("Ph·∫£n h·ªìi t·ª´ Gemini API kh√¥ng ch·ª©a d·ªØ li·ªáu h·ª£p l·ªá");
    }
    const textResponse = response.data.candidates[0].content.parts[0].text;
    const cleanedResponse = textResponse.replace(/```json|```/g, "").trim();
    return JSON.parse(cleanedResponse);
  } catch (error) {
    console.error("‚ùå L·ªói ph√¢n t√≠ch JSON:", error.message);
    throw new Error("Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi JSON t·ª´ Gemini API");
  }
};
const generateQuestions = async () => {
  const prompt = `H√£y t·∫°o ƒë√∫ng 3 c√¢u h·ªèi l·∫≠p tr√¨nh v·ªõi ƒë·ªô kh√≥ d·ªÖ ƒë·ªÉ ki·ªÉm tra ki·∫øn th·ª©c trung b√¨nh.
    - Hai c√¢u ƒë·∫ßu ti√™n ph·∫£i l√† c√¢u h·ªèi d·∫°ng True/False.
    - C√¢u th·ª© ba l√† c√¢u h·ªèi v·ªÅ MongoDB aggregation pipeline ·ªü m·ª©c ƒë·ªô beginner, y√™u c·∫ßu ng∆∞·ªùi ch∆°i vi·∫øt m·ªôt pipeline ƒë∆°n gi·∫£n.
    - M·ªói c√¢u h·ªèi ph·∫£i c√≥ th√™m tr∆∞·ªùng "cauTraLoi".
    - Tu√¢n theo ƒë·ªãnh d·∫°ng JSON sau:

    [
      {"cauHoi": "N·ªôi dung c√¢u h·ªèi 1", "loai": "true_false", "ngayTao": "ISO 8601 format", "cauTraLoi": "true ho·∫∑c false"},
      {"cauHoi": "N·ªôi dung c√¢u h·ªèi 2", "loai": "true_false", "ngayTao": "ISO 8601 format", "cauTraLoi": "true ho·∫∑c false"},
      {"cauHoi": "N·ªôi dung c√¢u h·ªèi 3 v·ªÅ MongoDB pipeline", "loai": "short_answer", "ngayTao": "ISO 8601 format", "cauTraLoi": "C√¢u tr·∫£ l·ªùi v√≠ d·ª• l√† m·ªôt aggregation pipeline"}
    ]
    Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng JSON theo c·∫•u tr√∫c tr√™n, kh√¥ng th√™m n·ªôi dung n√†o kh√°c.`;
  try {
    console.log("üîπ G·ª≠i request ƒë·∫øn Gemini API...");
    const response = await axios.post(GEMINI_API_URL, {
      contents: [{ parts: [{ text: prompt }] }],
    });

    let questions = parseJsonResponse(response);

    if (!Array.isArray(questions) || questions.length !== 3) {
      throw new Error("Gemini API kh√¥ng tr·∫£ v·ªÅ ƒë√∫ng 3 c√¢u h·ªèi");
    }

    questions = questions.map((q, index) => {
      const ngayTao = new Date(q.ngayTao);
      return {
        cauHoi: q.cauHoi?.trim() || `C√¢u h·ªèi ${index + 1} b·ªã thi·∫øu n·ªôi dung`,
        loai: q.loai || (index < 2 ? "true_false" : "short_answer"),
        ngayTao: isNaN(ngayTao) ? new Date().toISOString() : ngayTao.toISOString(),
        cauTraLoi: q.cauTraLoi?.trim() || `C√¢u tr·∫£ l·ªùi b·ªã thi·∫øu cho c√¢u ${index + 1}`, // Add cauTraLoi
      };
    });

    console.log("‚úÖ ƒê√£ t·∫°o c√¢u h·ªèi h·ª£p l·ªá:", questions);
    return questions;
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o c√¢u h·ªèi:", error.response?.data || error.message);
    throw error;
  }
};

//   if (!answerForm?.maNguoiChoi || !answerForm?.diaChiVi || !Array.isArray(answerForm.questions) || !Array.isArray(answerForm.answers)) {
//     throw new Error("D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá");
//   }

//   const prompt = `Ng∆∞·ªùi ch∆°i: ${answerForm.maNguoiChoi}
//   ƒê·ªãa ch·ªâ v√≠: ${answerForm.diaChiVi}
//   Danh s√°ch c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi:\n${answerForm.questions.map((q, i) => `- C√¢u h·ªèi: ${q} | C√¢u tr·∫£ l·ªùi: ${answerForm.answers[i] || "Ch∆∞a c√≥"}`).join("\n")}
  
//   H√£y ƒë√°nh gi√° c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi ch∆°i v√† tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c sau:
//   \`\`\`json
//   {
//     "maNguoiChoi": "${answerForm.maNguoiChoi}",
//     "diaChiVi": "${answerForm.diaChiVi}",
//     "ketQua": [
//       {
//         "cauHoi": "N·ªôi dung c√¢u h·ªèi",
//         "cauTraLoi": "C√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi ch∆°i",
//         "isTrue": <true n·∫øu c√¢u tr·∫£ l·ªùi ƒë√∫ng, false n·∫øu sai>
//       }
//       // L·∫∑p l·∫°i cho t·ª´ng c√¢u h·ªèi
//     ],
//     "isPassed": <true n·∫øu s·ªë c√¢u ƒë√∫ng >= 50% t·ªïng s·ªë c√¢u h·ªèi, ng∆∞·ª£c l·∫°i false>
//   }
//   \`\`\`
//   - V·ªõi c√¢u h·ªèi True/False, ch·ªâ ch·∫•p nh·∫≠n "True" ho·∫∑c "False" (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng) l√†m ƒë√°p √°n h·ª£p l·ªá v√† ki·ªÉm tra t√≠nh ƒë√∫ng ƒë·∫Øn d·ª±a tr√™n ki·∫øn th·ª©c l·∫≠p tr√¨nh c∆° b·∫£n.
//   - V·ªõi c√¢u h·ªèi MongoDB pipeline (c√¢u th·ª© 3), h√£y t·ª± t·∫°o m·ªôt ƒë√°p √°n chu·∫©n d·ª±a tr√™n c√¢u h·ªèi, sau ƒë√≥ so s√°nh ƒë√°p √°n c·ªßa ng∆∞·ªùi ch∆°i v·ªõi ƒë√°p √°n chu·∫©n. ƒê√°nh gi√° d·ª±a tr√™n t√≠nh ch√≠nh x√°c c√∫ ph√°p v√† logic c·ªßa pipeline (·ªü m·ª©c ƒë·ªô beginner).
//   - T√≠nh t·ª∑ l·ªá ƒë√∫ng: s·ªë c√¢u "isTrue: true" / t·ªïng s·ªë c√¢u h·ªèi. N·∫øu >= 0.5 th√¨ "isPassed": true.
//   Ch·ªâ tr·∫£ v·ªÅ JSON theo c·∫•u tr√∫c tr√™n, kh√¥ng th√™m n·ªôi dung n√†o kh√°c.`;

//   try {
//     console.log("üîπ G·ª≠i request ƒë·∫øn Gemini API ƒë·ªÉ ki·ªÉm tra c√¢u tr·∫£ l·ªùi...");
//     const response = await axios.post(GEMINI_API_URL, {
//       contents: [{ parts: [{ text: prompt }] }],
//     });
//     const jsonResponse = parseJsonResponse(response);
//     if (
//       !jsonResponse ||
//       !jsonResponse.maNguoiChoi ||
//       !jsonResponse.diaChiVi ||
//       !Array.isArray(jsonResponse.ketQua) ||
//       typeof jsonResponse.isPassed !== "boolean"
//     ) {
//       throw new Error("Ph·∫£n h·ªìi t·ª´ Gemini API kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc");
//     }

//     if (jsonResponse.ketQua.length !== answerForm.questions.length) {
//       throw new Error("S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ª´ Gemini kh√¥ng kh·ªõp v·ªõi s·ªë c√¢u h·ªèi");
//     }
//     // Log k·∫øt qu·∫£ t·ª´ Gemini ƒë·ªÉ ki·ªÉm tra
//     const correctCount = jsonResponse.ketQua.filter((item) => item.isTrue).length;
//     const totalQuestions = jsonResponse.ketQua.length;
//     console.log(`‚úÖ K·∫øt qu·∫£ t·ª´ Gemini: ${correctCount}/${totalQuestions} c√¢u ƒë√∫ng, isPassed: ${jsonResponse.isPassed}`);
//     return {
//       maNguoiChoi: jsonResponse.maNguoiChoi.trim(),
//       diaChiVi: jsonResponse.diaChiVi.trim(),
//       ketQua: jsonResponse.ketQua.map((item) => ({
//         cauHoi: item.cauHoi.trim(),
//         cauTraLoi: item.cauTraLoi.trim(),
//         isTrue: item.isTrue,
//       })),
//       isPassed: jsonResponse.isPassed,
//     };
//   } catch (error) {
//     console.error("‚ùå L·ªói ki·ªÉm tra c√¢u tr·∫£ l·ªùi:", error.response?.data || error.message);
//     throw error;
//   }
// };
const checkMongoDBPipeline = (userAnswer, correctAnswer) => {
  try {
    // Chu·∫©n h√≥a chu·ªói ƒë·∫ßu v√†o
    const normalize = (str) =>
      str
        .replace(/```json|```/g, "")
        .replace(/\s+/g, " ")
        .trim();

    const parse = (input) => {
      if (typeof input !== "string") return input;
      try {
        return JSON5.parse(normalize(input));
      } catch (e) {
        console.error("‚ùå JSON parse l·ªói:", e.message);
        return null;
      }
    };

    const userPipeline = parse(userAnswer);
    const correctPipeline = parse(correctAnswer);

    if (!Array.isArray(userPipeline) || !Array.isArray(correctPipeline)) {
      console.error("‚ùå Pipeline kh√¥ng ph·∫£i m·∫£ng:", { userPipeline, correctPipeline });
      return false;
    }

    if (userPipeline.length !== correctPipeline.length) {
      console.error("‚ùå S·ªë b∆∞·ªõc trong pipeline kh√¥ng kh·ªõp");
      return false;
    }

    const sortObject = (obj) => {
      if (typeof obj !== "object" || obj === null) return obj;
      if (Array.isArray(obj)) return obj.map(sortObject);
      return Object.keys(obj)
        .sort()
        .reduce((acc, key) => {
          acc[key] = sortObject(obj[key]);
          return acc;
        }, {});
    };

    for (let i = 0; i < userPipeline.length; i++) {
      const userStage = sortObject(userPipeline[i]);
      const correctStage = sortObject(correctPipeline[i]);

      if (JSON.stringify(userStage) !== JSON.stringify(correctStage)) {
        console.log("‚ùå Sai t·∫°i stage", i + 1);
        return false;
      }
    }

    return true;
  } catch (error) {
    console.error("‚ùå L·ªói khi so s√°nh:", error.message);
    return false;
  }
};


const kiemTraService = async (answerForm) => {
  // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
  if (!answerForm?.questions || !Array.isArray(answerForm.questions) || answerForm.questions.length === 0) {
    throw new Error("Danh s√°ch c√¢u h·ªèi kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng");
  }
  if (!answerForm?.answers || !Array.isArray(answerForm.answers) || answerForm.answers.length !== answerForm.questions.length) {
    throw new Error("Danh s√°ch c√¢u tr·∫£ l·ªùi kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng kh·ªõp v·ªõi s·ªë l∆∞·ª£ng c√¢u h·ªèi");
  }

  // L·∫•y ƒë√°p √°n chu·∫©n t·ª´ MongoDB
  let correctAnswers;
  try {
    correctAnswers = await Question.find({
      cauHoi: { $in: answerForm.questions },
    }).lean();

    const missingQuestions = answerForm.questions.filter(
      (q) => !correctAnswers.some((ca) => ca.cauHoi === q)
    );
    if (missingQuestions.length > 0) {
      console.error("‚ùå C√°c c√¢u h·ªèi kh√¥ng t√¨m th·∫•y trong MongoDB:", missingQuestions);
      throw new Error(`Kh√¥ng t√¨m th·∫•y ƒë√°p √°n cho ${missingQuestions.length} c√¢u h·ªèi`);
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y ƒë√°p √°n:", error.message);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y ƒë√°p √°n t·ª´ MongoDB");
  }

  // Ki·ªÉm tra t·ª´ng c√¢u tr·∫£ l·ªùi
  const ketQua = answerForm.questions.map((cauHoi, index) => {
    const userAnswer = answerForm.answers[index]?.trim();
    const correctAnswer = correctAnswers.find((item) => item.cauHoi === cauHoi);

    if (!correctAnswer) {
      console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë√°p √°n cho c√¢u h·ªèi: ${cauHoi}`);
      return {
        cauHoi,
        cauTraLoi: userAnswer || "Ch∆∞a c√≥",
        isTrue: false,
      };
    }

    let isTrue = false;

    if (correctAnswer.loai === "true_false") {
      if (
        !userAnswer ||
        typeof userAnswer !== "string" ||
        !["true", "false"].includes(userAnswer.toLowerCase())
      ) {
        console.warn(`‚ö†Ô∏è C√¢u tr·∫£ l·ªùi kh√¥ng h·ª£p l·ªá cho c√¢u h·ªèi True/False: ${userAnswer}`);
        return {
          cauHoi,
          cauTraLoi: userAnswer || "Ch∆∞a c√≥",
          isTrue: false,
        };
      }

      if (!correctAnswer.cauTraLoi || typeof correctAnswer.cauTraLoi !== "string") {
        console.error(`‚ùå ƒê√°p √°n ƒë√∫ng kh√¥ng h·ª£p l·ªá cho c√¢u h·ªèi: ${cauHoi}`, correctAnswer);
        return {
          cauHoi,
          cauTraLoi: userAnswer,
          isTrue: false,
        };
      }

      isTrue = userAnswer.trim().toLowerCase() === correctAnswer.cauTraLoi.trim().toLowerCase();
    } else if (correctAnswer.loai === "short_answer") {
      try {
        isTrue = checkMongoDBPipeline(userAnswer, correctAnswer.cauTraLoi);
      } catch (error) {
        console.error(`‚ùå L·ªói khi ki·ªÉm tra pipeline MongoDB cho c√¢u h·ªèi: ${cauHoi}`, error.message);
        isTrue = false;
      }
    }

    return {
      cauHoi,
      cauTraLoi: userAnswer || "Ch∆∞a c√≥",
      isTrue,
    };
  });

  // T√≠nh t·ª∑ l·ªá ƒë√∫ng
  const correctCount = ketQua.filter((item) => item.isTrue).length;
  const isPassed = correctCount / ketQua.length >= 0.5;

  // T·∫°o k·∫øt qu·∫£
  const result = {
    maNguoiChoi: answerForm.maNguoiChoi?.trim() || "Kh√¥ng x√°c ƒë·ªãnh",
    diaChiVi: answerForm.diaChiVi?.trim() || "Kh√¥ng x√°c ƒë·ªãnh",
    ketQua,
    isPassed,
  };

  console.log(
    `‚úÖ K·∫øt qu·∫£: ${correctCount}/${ketQua.length} c√¢u ƒë√∫ng, isPassed: ${isPassed}`
  );
  return result;
};
module.exports = {
  generateQuestions,
  kiemTraService,
};
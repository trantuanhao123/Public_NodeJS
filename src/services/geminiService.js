const axios = require("axios");
require("dotenv").config();

const API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;

if (!API_KEY) {
  console.error("‚ùå L·ªñI: GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong .env");
  throw new Error("GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong .env");
}
const parseJsonResponse = (response) => {
  try {
    if (!response?.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
      throw new Error("Ph·∫£n h·ªìi t·ª´ Gemini API kh√¥ng ch·ª©a d·ªØ li·ªáu h·ª£p l·ªá");
    }
    const textResponse = response.data.candidates[0].content.parts[0].text;
    const cleanedResponse = textResponse.replace(/```json|```/g, "").trim();
    return JSON.parse(cleanedResponse);
  } catch (error) {
    console.error("‚ùå L·ªói ph√¢n t√≠ch JSON:", error.message);
    throw new Error("Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi JSON t·ª´ Gemini API");
  }
};
const generateQuestions = async () => {
  const prompt = `H√£y t·∫°o ƒë√∫ng 3 c√¢u h·ªèi l·∫≠p tr√¨nh v·ªõi ƒë·ªô kh√≥ d·ªÖ ƒë·ªÉ ki·ªÉm tra ki·∫øn th·ª©c c∆° b·∫£n.
    - Hai c√¢u ƒë·∫ßu ti√™n ph·∫£i l√† c√¢u h·ªèi d·∫°ng True/False.
    - C√¢u th·ª© ba l√† c√¢u h·ªèi v·ªÅ MongoDB aggregation pipeline ·ªü m·ª©c ƒë·ªô beginner, y√™u c·∫ßu ng∆∞·ªùi ch∆°i vi·∫øt m·ªôt pipeline ƒë∆°n gi·∫£n.
    - M·ªói c√¢u h·ªèi ph·∫£i c√≥ th√™m tr∆∞·ªùng "cauTraLoi".
    - Tu√¢n theo ƒë·ªãnh d·∫°ng JSON sau:

    [
      {"cauHoi": "N·ªôi dung c√¢u h·ªèi 1", "loai": "true_false", "ngayTao": "ISO 8601 format", "cauTraLoi": "true ho·∫∑c false"},
      {"cauHoi": "N·ªôi dung c√¢u h·ªèi 2", "loai": "true_false", "ngayTao": "ISO 8601 format", "cauTraLoi": "true ho·∫∑c false"},
      {"cauHoi": "N·ªôi dung c√¢u h·ªèi 3 v·ªÅ MongoDB pipeline", "loai": "short_answer", "ngayTao": "ISO 8601 format", "cauTraLoi": "C√¢u tr·∫£ l·ªùi v√≠ d·ª• l√† m·ªôt aggregation pipeline"}
    ]
    Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng JSON theo c·∫•u tr√∫c tr√™n, kh√¥ng th√™m n·ªôi dung n√†o kh√°c.`;
  try {
    console.log("üîπ G·ª≠i request ƒë·∫øn Gemini API...");
    const response = await axios.post(GEMINI_API_URL, {
      contents: [{ parts: [{ text: prompt }] }],
    });

    let questions = parseJsonResponse(response);

    if (!Array.isArray(questions) || questions.length !== 3) {
      throw new Error("Gemini API kh√¥ng tr·∫£ v·ªÅ ƒë√∫ng 3 c√¢u h·ªèi");
    }

    questions = questions.map((q, index) => {
      const ngayTao = new Date(q.ngayTao);
      return {
        cauHoi: q.cauHoi?.trim() || `C√¢u h·ªèi ${index + 1} b·ªã thi·∫øu n·ªôi dung`,
        loai: q.loai || (index < 2 ? "true_false" : "short_answer"),
        ngayTao: isNaN(ngayTao) ? new Date().toISOString() : ngayTao.toISOString(),
        cauTraLoi: q.cauTraLoi?.trim() || `C√¢u tr·∫£ l·ªùi b·ªã thi·∫øu cho c√¢u ${index + 1}`, // Add cauTraLoi
      };
    });

    console.log("‚úÖ ƒê√£ t·∫°o c√¢u h·ªèi h·ª£p l·ªá:", questions);
    return questions;
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o c√¢u h·ªèi:", error.response?.data || error.message);
    throw error;
  }
};
const kiemTraService = async (answerForm) => {
  if (!answerForm?.maNguoiChoi || !answerForm?.diaChiVi || !Array.isArray(answerForm.questions) || !Array.isArray(answerForm.answers)) {
    throw new Error("D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá");
  }

  const prompt = `Ng∆∞·ªùi ch∆°i: ${answerForm.maNguoiChoi}
  ƒê·ªãa ch·ªâ v√≠: ${answerForm.diaChiVi}
  Danh s√°ch c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi:\n${answerForm.questions.map((q, i) => `- C√¢u h·ªèi: ${q} | C√¢u tr·∫£ l·ªùi: ${answerForm.answers[i] || "Ch∆∞a c√≥"}`).join("\n")}
  
  H√£y ƒë√°nh gi√° c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi ch∆°i v√† tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c sau:
  \`\`\`json
  {
    "maNguoiChoi": "${answerForm.maNguoiChoi}",
    "diaChiVi": "${answerForm.diaChiVi}",
    "ketQua": [
      {
        "cauHoi": "N·ªôi dung c√¢u h·ªèi",
        "cauTraLoi": "C√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi ch∆°i",
        "isTrue": <true n·∫øu c√¢u tr·∫£ l·ªùi ƒë√∫ng, false n·∫øu sai>
      }
      // L·∫∑p l·∫°i cho t·ª´ng c√¢u h·ªèi
    ],
    "isPassed": <true n·∫øu s·ªë c√¢u ƒë√∫ng >= 50% t·ªïng s·ªë c√¢u h·ªèi, ng∆∞·ª£c l·∫°i false>
  }
  \`\`\`
  - V·ªõi c√¢u h·ªèi True/False, ch·ªâ ch·∫•p nh·∫≠n "True" ho·∫∑c "False" (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng) l√†m ƒë√°p √°n h·ª£p l·ªá v√† ki·ªÉm tra t√≠nh ƒë√∫ng ƒë·∫Øn d·ª±a tr√™n ki·∫øn th·ª©c l·∫≠p tr√¨nh c∆° b·∫£n.
  - V·ªõi c√¢u h·ªèi MongoDB pipeline (c√¢u th·ª© 3), h√£y t·ª± t·∫°o m·ªôt ƒë√°p √°n chu·∫©n d·ª±a tr√™n c√¢u h·ªèi, sau ƒë√≥ so s√°nh ƒë√°p √°n c·ªßa ng∆∞·ªùi ch∆°i v·ªõi ƒë√°p √°n chu·∫©n. ƒê√°nh gi√° d·ª±a tr√™n t√≠nh ch√≠nh x√°c c√∫ ph√°p v√† logic c·ªßa pipeline (·ªü m·ª©c ƒë·ªô beginner).
  - T√≠nh t·ª∑ l·ªá ƒë√∫ng: s·ªë c√¢u "isTrue: true" / t·ªïng s·ªë c√¢u h·ªèi. N·∫øu >= 0.5 th√¨ "isPassed": true.
  Ch·ªâ tr·∫£ v·ªÅ JSON theo c·∫•u tr√∫c tr√™n, kh√¥ng th√™m n·ªôi dung n√†o kh√°c.`;

  try {
    console.log("üîπ G·ª≠i request ƒë·∫øn Gemini API ƒë·ªÉ ki·ªÉm tra c√¢u tr·∫£ l·ªùi...");
    const response = await axios.post(GEMINI_API_URL, {
      contents: [{ parts: [{ text: prompt }] }],
    });
    const jsonResponse = parseJsonResponse(response);
    if (
      !jsonResponse ||
      !jsonResponse.maNguoiChoi ||
      !jsonResponse.diaChiVi ||
      !Array.isArray(jsonResponse.ketQua) ||
      typeof jsonResponse.isPassed !== "boolean"
    ) {
      throw new Error("Ph·∫£n h·ªìi t·ª´ Gemini API kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc");
    }

    if (jsonResponse.ketQua.length !== answerForm.questions.length) {
      throw new Error("S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ª´ Gemini kh√¥ng kh·ªõp v·ªõi s·ªë c√¢u h·ªèi");
    }
    // Log k·∫øt qu·∫£ t·ª´ Gemini ƒë·ªÉ ki·ªÉm tra
    const correctCount = jsonResponse.ketQua.filter((item) => item.isTrue).length;
    const totalQuestions = jsonResponse.ketQua.length;
    console.log(`‚úÖ K·∫øt qu·∫£ t·ª´ Gemini: ${correctCount}/${totalQuestions} c√¢u ƒë√∫ng, isPassed: ${jsonResponse.isPassed}`);
    return {
      maNguoiChoi: jsonResponse.maNguoiChoi.trim(),
      diaChiVi: jsonResponse.diaChiVi.trim(),
      ketQua: jsonResponse.ketQua.map((item) => ({
        cauHoi: item.cauHoi.trim(),
        cauTraLoi: item.cauTraLoi.trim(),
        isTrue: item.isTrue,
      })),
      isPassed: jsonResponse.isPassed,
    };
  } catch (error) {
    console.error("‚ùå L·ªói ki·ªÉm tra c√¢u tr·∫£ l·ªùi:", error.response?.data || error.message);
    throw error;
  }
};
module.exports = {
  generateQuestions,
  kiemTraService,
};